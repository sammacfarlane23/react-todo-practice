{"version":3,"sources":["serviceWorker.js","reducers/todos.js","components/Header.js","components/AddForm.js","actions/todos.js","components/Item.js","components/List.js","App.js","index.js","store/configureStore.js"],"names":["Boolean","window","location","hostname","match","defaultState","state","action","type","todo","filter","id","className","style","textAlign","AddForm","props","handleSubmit","pristine","submitting","onSubmit","Field","name","component","disabled","height","reduxForm","form","addTodo","connect","dispatch","removeTodo","text","onClick","todos","map","key","Header","values","uuid","store","rootReducer","combineReducers","TodosReducer","formReducer","createStore","configureStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6CClBAC,EAAe,GAEN,aAAmC,IAAlCC,EAAiC,uDAAzBD,EAAcE,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,OAC3B,IAAK,cACH,OAAOH,EAAMI,QAAO,SAACD,GAAD,OAAUA,EAAKE,KAAOJ,EAAOI,MACnD,QACE,OAAOL,I,OCPE,oBACb,4BAAQM,UAAU,iBAAiBC,MAAO,CAAEC,UAAW,WACrD,wBAAIF,UAAU,IAAd,4BACA,0E,kBCFAG,EAAU,SAACC,GAAW,IAChBC,EAAuCD,EAAvCC,aAAcC,EAAyBF,EAAzBE,SAAUC,EAAeH,EAAfG,WAChC,OACE,0BAAMP,UAAU,WAAWQ,SAAUH,GACnC,yBAAKL,UAAU,wEACb,yBAAKA,UAAU,cACb,kBAACS,EAAA,EAAD,CACET,UAAU,eACVJ,KAAK,OACLc,KAAK,OACLC,UAAU,WAGd,4BACEC,SAAUN,GAAYC,EACtBP,UAAU,kBACVC,MAAO,CAAEY,OAAQ,SAHnB,UAcOV,EAFfA,EAAUW,YAAU,CAAEC,KAAM,OAAlBD,CAA2BX,GC5BxBa,EAAU,SAACnB,GAAD,MAAW,CAChCD,KAAM,WACNC,SC+BaoB,cAAQ,MANI,SAACC,GAC1B,MAAO,CACLC,WAAY,SAACpB,GAAD,OAAQmB,EDxBE,SAACnB,GAAD,MAAS,CACjCH,KAAM,cACNG,MCsB+BoB,CAAWpB,QAI7BkB,EA7BF,SAACb,GAKZ,OACE,yBAAKJ,UAAU,uCACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,wDACb,2BAAOA,UAAU,4BACf,2BAAOJ,KAAK,aACZ,0BAAMI,UAAU,eAElB,uBAAGA,UAAU,0BAA0BI,EAAMP,KAAKuB,MAClD,4BAAQC,QAbM,WACpBjB,EAAMe,WAAWf,EAAMP,KAAKE,KAYUC,UAAU,kBAA1C,gBCRKiB,eAFS,SAACvB,GAAD,MAAY,CAAE4B,MAAO5B,EAAM4B,SAEpCL,EANF,SAACb,GACZ,OAAOA,EAAMkB,MAAMC,KAAI,SAAC1B,GAAD,OAAU,kBAAC,EAAD,CAAM2B,IAAK3B,EAAKE,GAAIF,KAAMA,UC6B9CoB,cAAQ,MANI,SAACC,GAC1B,MAAO,CACLF,QAAS,SAACnB,GAAD,OAAUqB,EAASF,EAAQnB,QAIzBoB,EA1BH,SAACb,GASX,OACE,yBAAKJ,UAAU,mBACb,yBAAKA,UAAU,gBACb,kBAACyB,EAAD,MACA,kBAAC,EAAD,CAASjB,SAZA,SAACkB,GACdtB,EAAMY,QAAQ,CACZjB,GAAI4B,MACJP,KAAMM,EAAON,OAEfM,EAAON,KAAO,MAQV,kBAAC,EAAD,WCZFQ,G,OCNS,WACb,IAAMC,EAAcC,YAAgB,CAClCR,MAAOS,EACPhB,KAAMiB,MAKR,OAFcC,YAAYJ,GDAdK,IAEdN,EAAMV,SACJF,EAAQ,CACNI,KAAM,aACNrB,GAAI4B,SAGRC,EAAMV,SACJF,EAAQ,CACNI,KAAM,cACNrB,GAAI4B,SAIRQ,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,QAGJU,SAASC,eAAe,SRoGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d60c1a2c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const defaultState = [];\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [...state, action.todo];\r\n    case 'REMOVE_TODO':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <header className='m-0 header p-3' style={{ textAlign: 'center' }}>\r\n    <h1 className=''>Welcome to my to-do list</h1>\r\n    <p>Enter a to-do below to add it to the list</p>\r\n  </header>\r\n);\r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\n\r\nlet AddForm = (props) => {\r\n  const { handleSubmit, pristine, submitting } = props;\r\n  return (\r\n    <form className='form m-4' onSubmit={handleSubmit}>\r\n      <div className='col d-flex flex-column align-items-center justify-content-center m-0'>\r\n        <div className='form-group'>\r\n          <Field\r\n            className='form-control'\r\n            type='text'\r\n            name='text'\r\n            component='input'\r\n          />\r\n        </div>\r\n        <button\r\n          disabled={pristine || submitting}\r\n          className='btn btn-primary'\r\n          style={{ height: '38px' }}\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddForm = reduxForm({ form: 'add' })(AddForm);\r\n\r\nexport default AddForm;\r\n","export const addTodo = (todo) => ({\r\n  type: 'ADD_TODO',\r\n  todo,\r\n});\r\n\r\nexport const removeTodo = (id) => ({\r\n  type: 'REMOVE_TODO',\r\n  id,\r\n});\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo } from '../actions/todos';\r\n\r\nconst Item = (props) => {\r\n  const onRemoveClick = () => {\r\n    props.removeTodo(props.todo.id);\r\n  };\r\n\r\n  return (\r\n    <div className='card col-sm-10 col-10 p-1 my-3 item'>\r\n      <div className='card-body py-1'>\r\n        <div className='row d-flex justify-content-between align-items-start'>\r\n          <label className='checkbox-container col-2'>\r\n            <input type='checkbox' />\r\n            <span className='checkmark'></span>\r\n          </label>\r\n          <p className='font-weight-bold col-6'>{props.todo.text}</p>\r\n          <button onClick={onRemoveClick} className='btn btn-danger'>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    removeTodo: (id) => dispatch(removeTodo(id)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Item);\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport { connect } from 'react-redux';\r\n\r\nconst List = (props) => {\r\n  return props.todos.map((todo) => <Item key={todo.id} todo={todo} />);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ todos: state.todos });\r\n\r\nexport default connect(mapStateToProps)(List);\r\n","import React from 'react';\r\nimport uuid from 'react-uuid';\r\nimport { connect } from 'react-redux';\r\nimport Header from './components/Header';\r\nimport AddForm from './components/AddForm';\r\nimport List from './components/List';\r\nimport { addTodo } from './actions/todos';\r\n\r\nconst App = (props) => {\r\n  const submit = (values) => {\r\n    props.addTodo({\r\n      id: uuid(),\r\n      text: values.text,\r\n    });\r\n    values.text = '';\r\n  };\r\n\r\n  return (\r\n    <div className='container-fluid'>\r\n      <div className='main-content'>\r\n        <Header />\r\n        <AddForm onSubmit={submit} />\r\n        <List />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addTodo: (todo) => dispatch(addTodo(todo)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport uuid from 'react-uuid';\nimport configureStore from './store/configureStore';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { addTodo } from './actions/todos';\nimport './styles/styles.scss';\n\nconst store = configureStore();\n\nstore.dispatch(\n  addTodo({\n    text: 'First todo',\n    id: uuid(),\n  })\n);\nstore.dispatch(\n  addTodo({\n    text: 'Second todo',\n    id: uuid(),\n  })\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, combineReducers } from 'redux';\r\nimport { reducer as formReducer } from 'redux-form';\r\nimport TodosReducer from '../reducers/todos';\r\n\r\nexport default () => {\r\n  const rootReducer = combineReducers({\r\n    todos: TodosReducer,\r\n    form: formReducer,\r\n  });\r\n\r\n  const store = createStore(rootReducer);\r\n\r\n  return store;\r\n};\r\n"],"sourceRoot":""}