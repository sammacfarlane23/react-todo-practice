{"version":3,"sources":["serviceWorker.js","reducers/todos.js","components/Header.js","actions/todos.js","components/AddForm.js","components/Item.js","components/List.js","App.js","index.js","store/configureStore.js"],"names":["Boolean","window","location","hostname","match","defaultState","state","action","type","todo","filter","id","style","textAlign","addTodo","connect","dispatch","props","useState","entryText","changeEntryText","onSubmit","e","preventDefault","uuid","text","className","name","value","onChange","target","height","removeTodo","border","background","onClick","todos","map","key","App","Header","store","createStore","TodosReducer","getState","console","log","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBClBAC,EAAe,GAEN,aAAmC,IAAlCC,EAAiC,uDAAzBD,EAAcE,EAAW,uCAC/C,OAAQA,EAAOC,MACb,IAAK,WACH,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,OAC3B,IAAK,cACH,OAAOH,EAAMI,QAAO,SAACD,GAAD,OAAUA,EAAKE,KAAOJ,EAAOI,MACnD,QACE,OAAOL,I,OCPE,oBACb,4BAAQM,MAAO,CAAEC,UAAW,WAC1B,wDACA,0E,QCLSC,EAAU,SAACL,GAAD,MAAW,CAChCD,KAAM,WACNC,S,gBCgDaM,cAAQ,MANI,SAACC,GAC1B,MAAO,CACLF,QAAS,SAACL,GAAD,OAAUO,EAASF,EAAQL,QAIzBM,EA5CC,SAACE,GAAW,IAAD,EACYC,mBAAS,IADrB,mBAClBC,EADkB,KACPC,EADO,KAkBzB,OACE,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBACgB,KAAdJ,GACFF,EAAMH,QAAQ,CACZH,GAAIa,MACJC,KAAMN,IAGVC,EAAgB,MAKd,yBAAKM,UAAU,wEACb,yBAAKA,UAAU,cACb,2BACEA,UAAU,eACVlB,KAAK,OACLmB,KAAK,OACLC,MAAOT,EACPU,SAxBO,SAACP,GAChBF,EAAgBE,EAAEQ,OAAOF,WA0BrB,4BAAQF,UAAU,uBAAuBd,MAAO,CAAEmB,OAAQ,SAA1D,YCJOhB,cAAQ,MANI,SAACC,GAC1B,MAAO,CACLgB,WAAY,SAACrB,GAAD,OAAQK,EFvBE,SAACL,GAAD,MAAS,CACjCH,KAAM,cACNG,MEqB+BqB,CAAWrB,QAI7BI,EA5BF,SAACE,GAKZ,OACE,yBACES,UAAU,uBACVd,MAAO,CAAEqB,OAAQ,OAAQC,WAAY,SAErC,yBAAKR,UAAU,kBACb,yBAAKA,UAAU,sCACb,uBAAGA,UAAU,0BAA0BT,EAAMR,KAAKgB,MAClD,4BAAQU,QAZM,WACpBlB,EAAMe,WAAWf,EAAMR,KAAKE,KAWUe,UAAU,sBAA1C,gBCNKX,eAFS,SAACT,GAAD,MAAY,CAAE8B,MAAO9B,KAE9BS,EANF,SAACE,GACZ,OAAOA,EAAMmB,MAAMC,KAAI,SAAC5B,GAAD,OAAU,kBAAC,EAAD,CAAM6B,IAAK7B,EAAKE,GAAIF,KAAMA,UCgB9C8B,EAdH,WAGV,OACE,yBAAKb,UAAU,iDACb,yBAAKA,UAAU,aACb,kBAACc,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCPFC,ECLUC,YAAYC,GDO5BF,EAAMzB,SACJF,EAAQ,CACNW,KAAM,aACNd,GAAIa,SAGRiB,EAAMzB,SACJF,EAAQ,CACNW,KAAM,cACNd,GAAIa,SAGR,IAAMlB,EAAQmC,EAAMG,WACpBC,QAAQC,IAAIxC,GAEZyC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,EAAD,QAGJS,SAASC,eAAe,SRmGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLd,QAAQc,MAAMA,EAAMC,c","file":"static/js/main.490889e7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const defaultState = [];\r\n\r\nexport default (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TODO':\r\n      return [...state, action.todo];\r\n    case 'REMOVE_TODO':\r\n      return state.filter((todo) => todo.id !== action.id);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\r\n\r\nexport default () => (\r\n  <header style={{ textAlign: 'center' }}>\r\n    <h1>Welcome to my to-do list</h1>\r\n    <p>Enter a to-do below to add it to the list</p>\r\n  </header>\r\n);\r\n","export const addTodo = (todo) => ({\r\n  type: 'ADD_TODO',\r\n  todo,\r\n});\r\n\r\nexport const removeTodo = (id) => ({\r\n  type: 'REMOVE_TODO',\r\n  id,\r\n});\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addTodo } from '../actions/todos';\r\nimport uuid from 'react-uuid';\r\n\r\nconst AddForm = (props) => {\r\n  const [entryText, changeEntryText] = useState('');\r\n\r\n  const onChange = (e) => {\r\n    changeEntryText(e.target.value);\r\n  };\r\n\r\n  const submitForm = (e) => {\r\n    e.preventDefault();\r\n    if (entryText !== '') {\r\n      props.addTodo({\r\n        id: uuid(),\r\n        text: entryText,\r\n      });\r\n    }\r\n    changeEntryText('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitForm}>\r\n      <div className='col d-flex flex-column align-items-center justify-content-center m-0'>\r\n        <div className='form-group'>\r\n          <input\r\n            className='form-control'\r\n            type='text'\r\n            name='item'\r\n            value={entryText}\r\n            onChange={onChange}\r\n          />\r\n        </div>\r\n        <button className='btn btn-primary ml-2' style={{ height: '38px' }}>\r\n          Add\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addTodo: (todo) => dispatch(addTodo(todo)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(AddForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { removeTodo } from '../actions/todos';\r\n\r\nconst Item = (props) => {\r\n  const onRemoveClick = () => {\r\n    props.removeTodo(props.todo.id);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className='card col-12 p-0 my-3'\r\n      style={{ border: 'none', background: '#eee' }}\r\n    >\r\n      <div className='card-body py-1'>\r\n        <div className='row d-flex justify-content-between'>\r\n          <p className='font-weight-bold col-8'>{props.todo.text}</p>\r\n          <button onClick={onRemoveClick} className='btn btn-danger m-2'>\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    removeTodo: (id) => dispatch(removeTodo(id)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Item);\r\n","import React from 'react';\r\nimport Item from './Item';\r\nimport { connect } from 'react-redux';\r\nimport uuid from 'react-uuid';\r\n\r\nconst List = (props) => {\r\n  return props.todos.map((todo) => <Item key={todo.id} todo={todo} />);\r\n};\r\n\r\nconst mapStateToProps = (state) => ({ todos: state });\r\n\r\nexport default connect(mapStateToProps)(List);\r\n","import React, { useReducer } from 'react';\r\nimport Header from './components/Header';\r\nimport AddForm from './components/AddForm';\r\nimport { addTodo } from './actions/todos';\r\nimport List from './components/List';\r\nimport TodosReducer from './reducers/todos';\r\nimport { connect } from 'react-redux';\r\n\r\nconst App = () => {\r\n  const initialState = ['a', 'b', 'c'];\r\n\r\n  return (\r\n    <div className='container-fluid d-flex justify-content-center'>\r\n      <div className='col-sm-8 '>\r\n        <Header />\r\n        <AddForm />\r\n        <List />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store/configureStore.js';\nimport { Provider } from 'react-redux';\nimport App from './App.js';\nimport { addTodo } from './actions/todos';\nimport uuid from 'react-uuid';\n\nconst store = configureStore();\n\nstore.dispatch(\n  addTodo({\n    text: 'First todo',\n    id: uuid(),\n  })\n);\nstore.dispatch(\n  addTodo({\n    text: 'Second todo',\n    id: uuid(),\n  })\n);\nconst state = store.getState();\nconsole.log(state);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\r\nimport TodosReducer from '../reducers/todos';\r\n\r\nexport default () => {\r\n  const store = createStore(TodosReducer);\r\n\r\n  return store;\r\n};\r\n"],"sourceRoot":""}